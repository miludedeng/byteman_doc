Byteman Rule Language
规则定义在一个脚本文件中，包含了一系列的规则和注释。注释可以单独占用一行或者卸载规则的后面面。注释的开头使用#引导：
######################################
# Example Rule Set
#
# a single rule definition
RULE example rule
# comment line in rule body
 . . .
ENDRULE

规则事件
规则时间描述目标类中的目标方法的位置指定方式。目标方法可以是静态方法、实例方法或者是构造方法。如果没有指定方法的位置，那么将默认指定方法的开始位置。所以，最基本的规则定义方式如下
# rule skeleton
RULE <rule name>
CLASS <class name>
METHOD <method name>
BIND <bindings>
IF   <condition>
DO   <actions>
ENDRULE
RULE关键字后面可以写任何文本，是对规则的名称或描述，但至少要包含一个非空字符。RULE后面的内容并不要求是唯一的，他会在调试的时候被用来作为规则的标识。当脚本有错误被捕获到，该内容会输出。
类和方法的名称在CLASS和METHOD关键字后面，而且必须要在同一行。类名用来唯一标识一个类，但是并不包括唯一限制的报名。方法名是用来唯一标识一个类中的方法，不包含参数列表和反悔类型。构造方法使用<init>表示。
# class and method example
RULE any commit on any coordinator engine
CLASS CoordinatorEngine
METHOD commit
. . .
ENDRULE
该例中指定了一个名为CoordinatorEngine的类，不考虑它是属于哪个包。当有一个这个名字的类被加载，agent将会将一个触发点插入到名为commit的方法中。如果有多个重载的方法，将都会被插入触发点。
通过添加方法参数类型列表和返回值类型的方式可以精确匹配一个方法，例如：
# class and method example 2
RULE commit with no arguments on wst11 coordinator engine
CLASS com.arjuna.wst11.messaging.engines.CoordinatorEngine
METHOD State commit()
AT LINE 324
. . .
ENDRULE
这个规则将只匹配com.arjuna.wst11.messaging.engines包里的CoordinatorEngine类，并且精确匹配无参的、返回值为State的commit方法。注意，在这个列子中State类所在的包没有指明。在类型检查时通过方法的返回值判断该类所处的包。
上面的例子中通过AT LINE指定插入位置。跟在这个标记后面的参数必须是一个整数的行号。它指定了触发器插入到类的源码对应的行号。
注意：
*Byteman代理不会改变java.lang和org.jboss.byteman包中的类（可以通过设置系统属性取消这一限制，但是你必须知道你在做什么）。
*内部类可以通过使用$与他所属的外部类分割，比如，org.my.List$Cons,Map$Entry$Wrapper。
类规则和接口规则
Byteman规则可以在类和接口中使用。如果CLASS关键字被INTERFACE替换，该规则将会被注入到接口的实现类中。例如下面的规则：
# interface rule example
RULE commit with no arguments on any engine
INTERFACE com.arjuna.wst11.messaging.engines.Engine
METHOD commit()
. . .
ENDRULE
这个规则会注册到接口Engine的commit方法中。如果Engine有CoordinatorEngine和ParticipanEngine，则改规则会有两个触发点。一个是在CoordinatorEngine.commit()的开头，另一个是在ParticipanEngine.commit()方法的开头。该规则保证接口的所有实现类中都会有一个触发点。

重写规则
通常，Byteman只注入到定义的类的方法中。这有时并不好用。例如：
RULE trace Object.finalize
CLASS java.lang.Object
METHOD finalize
IF TRUE
DO System.out.println(“Finalizing “ + $0)
ENDRULE
打印域名被插入到Object.finalize()方法中。但是，JVM只会在重写了Object.finalize()方法的类中调用finalize方法。这个规则并不会修改重写方法。所以，在追踪时这个规则并不会被出发。除了finalize方法，还有很多中情况需要注入代码到重写的方法中。例如，Socket类有很多种子类都覆盖了bind方法。所以一个规则附着在Socket.bind()的时候，子类的bind方法被调用并不会触发规则（除非子类通过super调用了父类中的bind方法）。
当然，会可以为没一个重载的子类方法指定一个规则。然而，这样不仅反锁，而且当代码改变的时候会很麻烦。所以，Byteman提供了一种简单的语法支持规则注入到重载的子类方法中。
RULE trace Object.finalize
CLASS ^java.lang.Object
METHOD finalize
IF TRUE
DO System.out.println(“Finalizing “ + $0)
ENDRULE
^前缀加载类名的前面，通知agent这条规则应该在实现了finalize的类中注入。这种方式在接口中也适用，用来通知注入代码到该接口的实现类的重载了该实现类的子类中。
注意，如果一个重载方法调用一个父方法，这种情况将导致注入规则代码不只一次被触发。尤其是构造方法，不可避免的会出现重复触发。通过添加条件限制，判断调用者的方法名，可以很容易的解决这一问题。
RULE trace Object.finalize at initial call
CLASS ^java.lang.Object
METHOD finalize
IF NOT callerEquals(“finalize”)
DO System.out.println(“Finalizing “ + $0)
ENDRULE
这条规则使用了内建方法callerEquals。当通过super.finalize()条件为假，规则不会执行。

重写接口规则
^前缀也可以用在INTERFACE关键字中。正常情况下，接口规则只注入到直接实现接口方法的类。也就意味着接口规则病逝是注入到你感兴趣的类中。
例如，ArrayList类继承自AbstractList。AbstractList实现了List接口。一个附着到INTERFACE List的的规则只会被注入到AbstractList中，不会注入到ArrayList中。这是有原因的，因为AbstractList中会实现List类中的所有方法。然而，^前缀可以用于实现期望的效果。如果规则附着到INTERFACE ^List，然后他会被注入到AbstractList和ArrayList中。
注意：在接口与接口之间的继承、类与类之间的继承有微妙的差别。相同的类层次可以用来解释接口继承是被处理过的。
再看一下Collection接口，该接口是List接口的父接口。当一个规则附着到INTERFACE Collection时，他将会被注入到实现了Collection的类中和一些实现了Collection子接口的实现类中。List继承自Collection，这也就意味着AbstractList在这个链式关系中也会被注入规则。ArrayList类将不会被注入代码，因为该类中所有重写的方法都在AbstractList中被实现了。如果你想让这个规则注入到ArrayList重写的方法中，你可以通过使用INTERFACE ^Collection实现。


位置指定符
下面的例子中指定了方法触发器的位置要么是通过指定行号指定精确位置要么是使用AT LINE或默认的在方法的开头。显然，指定行号可以在执行中指定任何位置，并且容易和方便。然而，这种方式不适合自动化测试中使用，测试中的代码可能会被频繁的修改。显然当程序的代码修改了，相关的测试代码也需要修改。但是修改代码会的行号，行号也会改变。这将导致测试脚本中的行号失效。幸运的是，还有很多种其他的方法指定触发器应该插入到目标方法的位置。例如，
# location specifier example
RULE countdown at commit
CLASS CoordinatorEngine
METHOD commit
AFTER WRITE $current
. . .
ENDRULE
current前面的前缀$标识一个本地变量，或者是一个方法的参数。在这个例子中，current是一个枚举变量，在CoordinatorEngine.commit方法的开头声明和初始化。
public State commit()
{
 final State current ;
 synchronized(this)
 {
   current = this.state ;
   if (current == State.STATE_PREPARED_SUCCESS) {
     . . .
所以，当字节码的第一次更新栈，存储current的写操作时触发点就被立即插入。在源码层面上讲，就是触发点在源码的本地变量current初始化之后插入。
下面的规则把触发器的位置插入到第一次读取字段recovered:
# location specifier example 2
RULE add countdown at recreate
CLASS CoordinatorEngine
METHOD <init>
AT READ CoordinatorEngine.recovered
. . .
ENDRULE
注意：上面的李子忠字段类型被限制，以确保写操作是属于CoordinatorEngine类的实例。如果没有类型限定，可能会匹配任何名为recovered的字段。
一下是所有可以雨来指定位置的方式：
AT ENTRY
AT EXIT
AT LINE number
AT READ [type .] field [count | ALL ]
AT READ $var-or-idx [count | ALL ]
AFTER READ [ type .] field [count | ALL ]
AFTER READ $var-or-idx [count | ALL ]
AT WRITE [ type .] field [count | ALL ]
AT WRITE $var-or-idx [count | ALL ]
AFTER WRITE [ type .] field [count | ALL ]
AFTER WRITE $var-or-idx [count | ALL ]
AT INVOKE [ type .] method [ ( argtypes ) ] [count | ALL ]
AFTER INVOKE [ type .] method [ ( argtypes ) ][count | ALL ]
AT SYNCHRONIZE [count | ALL ]
AFTER SYNCHRONIZE [count | ALL ]
AT THROW [count | ALL ]
如果需要指定位置，位置指定符必须紧跟在METHOD的下一行。如果没有指定位置，默认是AT ENTRY。
AT ENTRY通常是指定触发点在指定方法的第一个可执行语句之前。例外情况是在构造方法中，触发点是在super之后的第一条语句之前的位置。这对于保证规则不会砸实例的构造之前绑定或操作。
AT EXIT指名触发点在一个方法正常返回是注入（即在隐性或显示的声明return的地方，抛出异常的除外）。
AT LINE指定符将触发点定位在其后的行号等于或小于源码行号后的第一个可以行的字节码指令之前。如果在指定的行号处没有或之后没有可制定的代码，触发点不会被插入。
AT READ指定符之后跟一个字段名，触发点会在第一次出现该字段名的地方被插入。它对应于字节码对应的第一次getField指令。如果指定了类型，那么getFiled指定只会匹配声明类型相同的字段。如果count值指定为N,则第N次getField将会被用作触发点。
AT READ指定符之后使用$前缀加本地变量名、方法参数名、或方法参数索引定位触发点在第一条读取对应的本地变量或方法参数之前。它对应字节码中是iload,dload,aload等指令。如果指定了count值N，则第N个次读取将会被用插入触发点。
注意：如果编译时使用-g标记，触发的方法会包含了一个本地变量表，则可以使用本地变量名或参数变量名像$i,$this或$arg1。通过对比，可以使用索引$0,$1作为参数变量的引用（注意，$0只能匹配事例变量的触发方法）。
AFTER READ类似于AT READ，区别在于AFTER READER实在getField之后插入触发点。
AT WRITE和AFTER WRITE指定符和对应的READ指定符使用方法相同。区别在WRITE对应字节码中的putField、istore、dstore等指令。
注意，AT WRITE $0、AT WRITE $this不会匹配任何候选触发方法，因为实例方法调用的目标对象从来没有分配。
AT INVOKE和AFTER INVOKE指定符类似READ和WRITE，不同之处是它们实在调用方法或构造方法时作为出发点。
AT SYNCHRONIZE和AFTER SYNCHRONIZE指定符表示同步代码块在目标方法中，对应于字节码中的MONITORENTER指令。注意，AFTER SYNCHRONIZE实在进入同步块之后出发，而不是同步块结束时触发。
AT THROW指定符表示一个异常抛出操作作为出发方法的出发点。该指定符可以通过一个限定包名和类型的异常。如果指定了count为N,则在第N个位置throw处触发。如果关键字ALL被指定，则所有地方的throw都会被插入触发点。

规则绑定
规则中包含一个BIND标识符，紧随其后的是一个计算出来的变量的值，被规则中的变量所引用。这些变量是在IF后的condition语句之前被计算出来。例如：
# binding example
RULE countdown at commit
CLASS com.arjuna.wst11.messaging.engines.CoordinatorEngine
METHOD commit
AT READ state
BIND engine:CoordinatorEngine = $0;
 recovered:boolean = engine.isRecovered();
 identifier:String = engine.getId()
  . . .
ENDRULE
该规则中创建了一个engine的变量。当commit方法被触发，这个变量绑定了commit的方法的第一个参数引用，使用$0表示（如果commit是一个静态方法，使用$0引用将会返回一个类型检查错误）。触发方法的参数引用可以使用索引，$0,$1,$2等表示。engine变量的声明指定了CoordinatorEngine类型。类型声明并不是必需的，因为它可以通过$0的类型确定。
类似engine变量，变量recovered和identifier绑定了一个表达式。注意，engine变量的绑定必须要在这两个表达式之前。另外，这两个变量也指定了类型，这两个类型并不是必须的。
BIND NOTHING在规则中是指规则并不需要任何绑定。也可以把BIND省略。

规则表达式
表达式在＝操作符的右边，在事件绑定中，可以是一个简单的表达式。例如
*引用一个之前绑定的变量
*引用触发方法的变量
*引用触发点范围内的本地变量
*引用特殊变量$!,$^,$#,$*,$@,$CLASS,$METHOD
*静态字段引用
*原始字面值
*字段访问
*静态或实例变量调用
*内置操作调用
注意，内置操作将在下面做详细解释。
表达式可以使用java运算符将多个表达式混合，如+，-，*，/，%，&，|，^，&&，||，！，＝，==，!=，<，<=，>，>=，new等。还有三元运算符?:。类型检查器对于不管是简单表达式还是复杂表达式都尽可能做的最好。如果已知engine变量的类型，它将会通过反射推断engine.recovered字段的类型和engine.isRecovered()方法的返回类型。
注意：
*throw和return操作在规则行为中只能作为最后的action.
*表达式必须服从规则的优先级顺序和结合性。
*触发方法的接受者和参数的引用可以使用索引$0(在静态方法中无效)，$1等。如果方法是使用debug选项编译，那么符号引用也可以使用。所以，例如$this、$myArg可以被用作$0、$1的别名（如果方法的第一个参数声明的名称是myArg）。
*如果出发方法使用debug选项编译，则本地变量的引用可以使用同样的符号引用方法的参数。所以，如果变量idx在触发点的作用域范围内，则可以使用$idx引用该值。
*特殊变量提供了访问触发方法数据的方式。一下是七种特殊变量：
1）$!是在AT EXIT规则中绑定了方法的返回值的变量。它的类型和触发方法的返回类型一致。如果触发方法返回类型是void，则该规则将会失败。
2）在AFTER INVOKE规则中$!也是可用的，并且绑定了返回值。它的类型和调用的返回类型是一样的。如果调用方法返回值是void，则该规则会失败。
3）$^只在AT THROW规则中可用，并绑定了throwable。它的类型就是Throwable。
4）
5）
6）
7）





























